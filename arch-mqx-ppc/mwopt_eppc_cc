# mwopt_eppc_cc - options specific to c compiler
#
#-------------------------------------------------------------------------------
#Preprocessing, Precompiling, and Input File Control Options
#-------------------------------------------------------------------------------
#  -c                         # global; compile only, do not link
#  -[no]codegen               # global; generate object code
#  -[no]convertpaths          # global; interpret #include filepaths specified
#                             #   for a foreign operating system; i.e.,
#                             #   <sys/stat.h> or <:sys:stat.h>; when enabled,
#                             #   '/' and ':' will separate directories and
#                             #   cannot be used in filenames (note: this is
#                             #   not a problem on Win32, since these
#                             #   characters are already disallowed in
#                             #   filenames; it is safe to leave the option
#                             #   'on'); default
#  -cwd keyword               # specify #include searching semantics:  before
#                             #   searching any access paths, the path
#                             #   specified by this option will be searched
#     proj                    #    begin search in current working directory;
#                             #      default
#     source                  #    begin search in directory of source file
#     explicit                #    no implicit directory; only search '-I' or
#                             #      '-ir' paths
#     include                 #    begin search in directory of referencing
#                             #      file
#                             #
#  -D+ | -d[efine]            # cased; define symbol 'name' to 'value' if
#    name[=value]             #   specified, else '1'
#  -[no]defaults              # global; passed to linker;
#                             #   same as '-[no]stdinc'; default
#  -dis[assemble]             # global; passed to all tools;
#                             #   disassemble files to stdout
#  -E                         # global; cased; preprocess source files
#  -EP                        # global; cased; preprocess and strip out
#                             #   #line/#pragma directives
#  -enc[oding] keyword        # specify default source encoding; compiler will
#                             #   automatically detect UTF-8 header or
#                             #   UCS-2/UCS-4 encodings regardless of setting
#     ascii                   #    ASCII; default
#     autodetect|multibyte|   #    scan file for multibyte_encoding (slower)
#       mb                    #
#     system                  #    use system locale
#     UTF[8|-8]               #    UTF-8
#     SJIS|Shift-JIS|         #    Shift-JIS
#       ShiftJIS              #
#     EUC[JP|-JP]             #    EUC-JP
#     ISO[2022JP|-2022-JP]    #    ISO-2022-JP
#                             #
#  -ext extension             # global; specify extension for generated object
#                             #   files; with a leading period ('.'), appends
#                             #   extension; without, replaces source file's
#                             #   extension; for 'extension', maximum length 14
#                             #   chars; default is none
#  -fatext                    # global; use 'eppc.o' as extension for generated
#                             #   object files
#  -gccinc[ludes]             # global; adopt GCC #include semantics:  add '-I'
#                             #   paths to system list if '-I-' is not
#                             #   specified, and search directory of
#                             #   referencing file first for #includes (same as
#                             #   '-cwd include')
#  -[no]gccdep[ends]          # global; if set, write dependency file (-MD,
#                             #   -MMD) with name and location based on output
#                             #   file (compatible with gcc 3.x); else base
#                             #   filename on the source file and write to the
#                             #   current directory (legacy MW behavior)
#  -i- | -I-                  # global; change target for '-I' access paths to
#                             #   the system list; implies '-cwd explicit';
#                             #   while compiling, user paths then system paths
#                             #   are searched when using '#include "..."; only
#                             #   system paths are searched with '#include
#                             #   <...>'
#  -I+ | -i path              # global; cased; append access path to current
#                             #   #include list(see '-gccincludes' and '-I-')
#  -include file              # prefix text file or precompiled header onto all
#                             #   source files
#  -ir path                   # global; append a recursive access path to
#                             #   current #include list
#  -[no]keepobj[ects]         # global; keep object files generated after
#                             #   invoking linker; if disabled, intermediate
#                             #   object files are temporary and deleted after
#                             #   link stage; objects are always kept when
#                             #   compiling
#  -M                         # global; cased; scan source files for
#                             #   dependencies and emit Makefile, do not
#                             #   generate object code
#  -MM                        # global; cased; like -M, but do not list system
#                             #   include files
#  -MD                        # global; cased; like -M, but write dependency
#                             #   map to a file (see ~gccdep) and generate
#                             #   object code
#  -MMD                       # global; cased; like -MD, but do not list system
#                             #   include files
#  -Mfile file                # global; cased; like -M, but write dependency
#                             #   map to the specified file
#  -MMfile file               # global; cased; like -MM, but write dependency
#                             #   map to the specified file
#  -MDfile file               # global; cased; like -MD, but write dependency
#                             #   map to the specified file
#  -MMDfile file              # global; cased; like -MMD, but write dependency
#                             #   map to the specified file
#  -make                      # global; scan source files for dependencies and
#                             #   emit Makefile, do not generate object code
#  -nofail                    # continue working after errors in earlier files
#  -nolink                    # global; compile only, do not link
#  -noprecompile              # do not precompile any files based on the
#                             #   filename extension
#  -nosyspath                 # global; treat #include <...> like #include
#                             #   "..."; always search both user and system
#                             #   path lists
#  -o file|dir                # specify output filename or directory for object
#                             #   file(s) or text output
#  -P                         # global; cased; preprocess and send output to
#                             #   file; do not generate code
#  -precompile file|dir       # generate precompiled header from source; write
#                             #   header to 'file' if specified, or put header
#                             #   in 'dir'; if argument is "", write header to
#                             #   source-specified location; if neither is
#                             #   defined, header filename is derived from
#                             #   source filename; note: the driver can tell
#                             #   whether to precompile a file based on its
#                             #   extension; '-precompile file source' then is
#                             #   the same as '-c -o file source'
#  -preprocess                # global; preprocess source files
#  -ppopt keyword[,...]       # specify options affecting the preprocessed
#                             #   output
#     [no]break               #    emit file/line breaks; default
#     [no]line                #    emit #line directives, else comments;
#                             #      default
#     [no]full[path]          #    emit full path of file, else base filename;
#                             #      default
#     [no]pragma              #    keep #pragma directives, else strip them;
#                             #      default
#     [no]comment             #    keep comments, else strip them
#     [no]space               #    keep whitespace, else strip it; default
#                             #
#  -prefix file               # prefix text file or precompiled header onto all
#                             #   source files
#  -S                         # global; cased; passed to all tools;
#                             #   disassemble and send output to file
#  -[no]stdinc                # global; use standard system include paths
#                             #   (specified by the environment variable
#                             #   %MWCIncludes%); added after all system '-I'
#                             #   paths; default
#  -U+ | -u[ndefine] name     # cased; undefine symbol 'name'
#  -allow_macro_redefs        # allow macro redefinitions without an error or
#                             #   warning
#
#-------------------------------------------------------------------------------
#Front-End C/C++ Language Options
#-------------------------------------------------------------------------------
#  -ansi keyword              # specify ANSI conformance options, overriding
#                             #   the given settings
#     off                     #    same as '-stdkeywords off', '-enum min', and
#                             #      '-strict off'; default
#     on|relaxed              #    same as '-stdkeywords on', '-enum min', and
#                             #      '-strict on'
#     strict                  #    same as '-stdkeywords on', '-enum int', and
#                             #      '-strict on'
#                             #
#  -bool on|off               # enable C++ 'bool' type, 'true' and 'false'
#                             #   constants; default is on
#  -nolonglong                # disable 'long long' support
#							 #
#  -Cpp_exceptions on|off     # enable or disable C++ exceptions; default is on
#  -dialect | -lang keyword   # specify source language
#     c                       #    treat source as C always
#     c++                     #    treat source as C++ always
#     ec++                    #    generate warnings for use of C++ features
#                             #      outside Embedded C++ subset (implies
#                             #      '-dialect cplus')
#     objc                    #    compile for Objective C
#     c99                     #    compile with C99 extensions. When compiling
#                             #      file with non-standard file extension,
#                             #      please further specify the type of
#                             #      language being compiled using the -lang
#                             #      option above
#                             #
#  -enum keyword              # specify default size for enumeration types
#     min                     #    use the minimal-sized type; default
#     int                     #    use int-sized enums
#                             #
#  -min_enum_size keyword     # specify the minimum size for enumeration types
#                             #   (implies -enum min)
#     1                       #    minimum size is 1
#     2                       #    minimum size is 2
#     4                       #    minimum size is 4
#                             #
#  -for_scoping on|off        # control legacy (non-standard) for-scoping
#                             #   behavior; when enabled, variables declared in
#                             #   'for' loops are visible to the enclosing
#                             #   scope; when disabled, such variables are
#                             #   scoped to the loop only; default is off
#  -fl[ag] pragma             # specify an 'on/off' compiler #pragma;
#                             #   '-flag foo' is the same as '#pragma foo on',
#                             #   '-flag no-foo' is the same as '#pragma foo
#                             #   off'; use '-pragma' option for other cases
#  -gcc[ext | _extensions]    # enable GCC language extensions; default is off
#    on|off                   #
#  -inline keyword[,...]      # specify inline options
#     on|smart                #    turn on inlining for 'inline' functions;
#                             #      default
#     none|off                #    turn off inlining
#     auto                    #    auto-inline small functions (without
#                             #      'inline' explicitly specified)
#     noauto                  #    do not auto-inline; default
#     all                     #    turn on aggressive inlining: same as
#                             #      '-inline on, auto'
#     deferred                #    defer inlining until end of compilation
#                             #      unit; this allows inlining of functions
#                             #      defined before and after the caller;
#                             #      deprecated option, use '-ipa file'
#     level=n                 #    cased; inline functions up to 'n' levels
#                             #      deep; level 0 is the same as '-inline on';
#                             #      for 'n', range 0 - 8
#     [no]bottomup            #    inline bottom-up, starting from leaves of
#                             #      the call graph rather than the top-level
#                             #      function; default
#                             #
#  -inst[mgr | ance_manager]  # enable C++ template instance manager; must be
#    keyword[,...]            #   enabled or disabled for all files in a
#                             #   target; remove the database along with a
#                             #   'make clean'
#     on                      #    enable manager
#     off                     #    disable manager; default
#     file=<path>             #    specify database used for instance manager
#                             #      tracking (default 'cwinst.db')
#                             #
#  -ipa keyword[,...]         # select interprocedural analysis level
#     function|off            #    traditional mode (per-function
#                             #      optimization); default
#     file                    #    per-file optimization (same as 'deferred
#                             #      codegen')
#     program                 #    per-program optimization (if compiling, use
#                             #      normally; if linking, pass all files or
#                             #      *.irobjs on the command line)
#     program-final|program2  #    per-program optimization (without linking;
#                             #      pass all files or *.irobjs on the command
#                             #      line)
#                             #
#  -iso_templates on|off      # enable ISO C++ template parser; default is off
#  -[no]mapcr                 # reverse mapping of '\n' and '\r' so that
#                             #   '\n'==13 and '\r'==10 (for Macintosh MPW
#                             #   compatability)
#  -msext keyword             # [dis]allow Microsoft VC++ extensions
#     on                      #    enable extensions: redefining macros,
#                             #      allowing XXX::yyy syntax when declaring
#                             #      method yyy of class XXX,
#                             #      allowing extra commas,
#                             #      ignoring casts to the same type,
#                             #      treating function types with equivalent
#                             #      parameter lists but different return types
#                             #      as equal,
#                             #      allowing pointer-to-integer conversions,
#                             #      and various syntactical differences
#     off                     #    disable extensions; default on non-x86
#                             #      targets
#                             #
#  -once                      # prevent header files from being processed more
#                             #   than once
#  -pragma ...                # specify a #pragma for the compiler such as
#                             #   "#pragma ..."; quote the parameter if you
#                             #   provide an argument (i.e., '-pragma "myopt
#                             #   reset"')
#  -r[equireprotos]           # require prototypes
#  -relax_pointers            # relax pointer type-checking rules in C
#  -RTTI on|off               # select run-time typing information (for C++);
#                             #   default is on
#  -som                       # enable Apple's Direct-to-SOM implementation
#  -som_env_check             # enables automatic SOM environment and new
#                             #   allocation checking; implies -som
#  -stdkeywords on|off        # allow only standard keywords; default is off
#  -str[ings] keyword[,...]   # specify string constant options
#     [no]reuse               #    reuse strings; equivalent strings are the
#                             #      same object; default
#     [no]pool                #    pool strings into a single data object
#     [no]readonly            #    make all string constants read-only
#                             #
#  -strict on|off             # specify ANSI strictness checking; default is
#                             #   off
#  -trigraphs on|off          # enable recognition of trigraphs; default is off
#  -wchar_t on|off            # enable wchar_t as a built-in C++ type; default
#                             #   is on
#
#-------------------------------------------------------------------------------
#Optimizer Options
#
#   Note that all options besides '-opt off|on|all|space|speed|level=...'
#   (marked with 'compatibility') are for backwards compatibility or special
#   needs only; other optimization options may be superceded by use of '-opt
#   level=xxx'.
#-------------------------------------------------------------------------------
#  -O                         # same as '-O2'
#  -O+keyword[,...]           # cased; control optimization; you may combine
#                             #   options as in '-O4,p'
#     0                       #    same as '-opt off'
#     1                       #    same as '-opt level=1'
#     2                       #    same as '-opt level=2, peephole'
#     3                       #    same as '-opt level=3, peephole'
#     4                       #    same as '-opt level=4, peephole, schedule,
#                             #      autoinline, func_align 16'
#     p                       #    same as '-opt speed'
#     s                       #    same as '-opt space'
#                             #
#  -opt keyword[,...]         # specify optimization options
#     off|none                #    suppress all optimizations; default
#     on                      #    same as -opt level=2, peephole
#     all|full                #    same as -opt speed,level=4, peephole,
#                             #      schedule, autoinline, func_align 16
#     [no]space | [no]size    #    optimize for space
#     [no]speed               #    optimize for speed
#     l[evel]=num             #    set optimization level:
#                             #      level 0: global register allocation only
#                             #      for temporary values
#                             #      level 1: adds dead code elimination,
#                             #      branch and arithmetic optimizations,
#                             #      expression simplification.
#                             #      level 2: adds common subexpression
#                             #      elimination, copy and expression
#                             #      propagation, stack frame compression,
#                             #      stack alignment, fast floating-point to
#                             #      integer conversions.
#                             #      level 3: adds dead store elimination, live
#                             #      range splitting, loop-invariant code
#                             #      motion, strength reduction, loop
#                             #      transformations, loop unrolling (with -opt
#                             #      speed only), loop vectorization,
#                             #      lifetime-based register allocation.
#                             #      level 4: like level 3, but with more
#                             #      comprehensive optimizations from levels 1
#                             #      and 2.; for 'num', range 0 - 4; default is
#                             #      0
#     [no]cse |               #    common subexpression elimination
#       [no]commonsubs        #
#     [no]deadcode            #    removal of dead code
#     [no]deadstore           #    removal of dead assignments
#     [no]lifetimes           #    computation of variable lifetimes
#     [no]loop[invariants]    #    removal of loop invariants
#     [no]prop[agation]       #    propagation of constant and copy assignments
#     [no]strength            #    strength reduction; reducing multiplication
#                             #      by an index variable into addition
#     [no]dead                #    same as -opt [no]deadcode and [no]deadstore
#     [no]alias_by_type       #    type based alias optimizations
#     [no]peep[hole]          #    peephole optimization
#     display|dump            #    display list of active optimizations
#                             #
#
#-------------------------------------------------------------------------------
#Embedded PowerPC Options
#-------------------------------------------------------------------------------
#  -align keyword[,...]       # specify structure/array alignment options
#     power[pc]               #    PowerPC alignment; default
#     mac68k                  #    Macintosh 680x0 alignment
#     mac68k4byte             #    Mac 680x0 4-byte alignment
#     array[members]          #    align members of arrays
#                             #
#  -common on|off             # move all uninitialized data into a common
#                             #   section; default is off
#  -fp_contract | -maf on|    # generate fused multiply-add instructions;
#    off                      #   default is off
#  -func_align keyword        # specify function alignment
#     4                       #    4 bytes; default
#     8                       #    8 bytes
#     16                      #    16 bytes
#     32                      #    32 bytes
#     64                      #    64 bytes
#     128                     #    128 bytes
#                             #
#  -pool[data] on|off         # pool like data objects; default is on
#  -profile on|off            # generate calls to at function entry and exit
#                             #   for use with a profiler; default is off
#  -rostr | -readonlystrings  # make string constants read-only
#  -schedule on|off           # schedule instructions; default is off
#  -use_lmw_stmw on|off       # use multiple-word load/store instructions for
#                             #   function prologue/epilogue; note: this option
#                             #   only applies to big-endian machines except
#                             #   e500 architectures; default is off
#  -[no]altivec_move_block    # use altivec instructions for moving blocks when
#                             #   possible
#  -[no]relax_ieee            # allow relaxed ieee floating point; default
#  -strict_ieee               # require strict ieee floating point
#  -[no-]ordered-fp-compares  # assume no unordered values for compares
#  -vector keyword[,...]      # specify Altivec vectorization options
#     on                      #    turn on support for vector types / codegen
#     off                     #    turn off vectorization; default
#     vrsave                  #    use VRSAVE prologue/epilogue code, implies
#                             #      '-vector on'
#     novrsave                #    do not use VRSAVE prologue/epilogue code;
#                             #      default
#                             #
#  -[no]volatileasm           # treat inlined assembly as volatile
#  -use_isel on|off           # generate isel instruction; note: this option
#                             #   only applies to machines which support the
#                             #   Freescale ISEL APU; default is off
#  -vle                       # compress for PowerPC VLE; note: this option
#                             #   sets the processor to Zen
#  -ppc_asm_to_vle            # translate Classic PowerPC inline asm to PowerPC
#                             #   VLE; note: this option sets the processor to
#                             #   Zen and enables VLE code generation in C/C++
#                             #   files
#  -use_fsel on|off           # generate fsel instruction; note: this option
#                             #   only applies to machines with hardware
#                             #   floating point which support fsel; default is
#                             #   off
#  -spe_vector                # enable the SPE vector support
#  -spe_addl_vector           # enable the additional SPE vector support
#  -spe2_vector               # enable the SPE2 vector support
#
#-------------------------------------------------------------------------------
#C/C++ Warning Options
#-------------------------------------------------------------------------------
#  -w[arn[ings]]              # global; for this tool;
#    keyword[,...]            #   warning options
#     off                     #    passed to all tools;
#                             #      turn off all warnings
#     on                      #    passed to all tools;
#                             #      turn on most warnings
#     [no]cmdline             #    passed to all tools;
#                             #      command-line driver/parser warnings
#     [no]err[or] |           #    passed to all tools;
#       [no]iserr[or]         #      treat warnings as errors
#     most                    #    turn on most warnings
#     all                     #    turn on almost all warnings, require
#                             #      prototypes
#     full                    #    turn on all warnings (likely to generate
#                             #      spurious warnings), require prototypes
#     [no]pragmas |           #    illegal #pragmas (most)
#       [no]illpragmas        #
#     [no]empty[decl]         #    empty declarations (most)
#     [no]possible |          #    possible unwanted effects (most)
#       [no]unwanted          #
#     [no]unusedarg           #    unused arguments (most)
#     [no]unusedvar           #    unused variables (most)
#     [no]unused              #    same as -w [no]unusedarg,[no]unusedvar
#                             #      (most)
#     [no]extracomma |        #    extra commas (most)
#       [no]comma             #
#     [no]pedantic |          #    pedantic error checking (most)
#       [no]extended          #
#     [no]hidevirtual |       #    hidden virtual functions (most)
#       [no]hidden[virtual]   #
#     [no]largeargs           #    passing large arguments to unprototyped
#                             #      functions (most)
#     [no]unusedexpr          #    use of expressions as statements without
#                             #      side effects (most)
#     [no]ptrintconv          #    lossy conversions from pointers to integers
#                             #      (most)
#     [no]tokenpasting        #    token not formed by ## operator (most)
#     [no]missingreturn       #    return without a value in non-void-returning
#                             #      function  (most)
#     [no]structclass         #    inconsistent use of 'class' and 'struct'
#                             #      (most)
#     [no]filecaps            #    incorrect capitalization used in #include
#                             #      "..." (most)
#     [no]sysfilecaps         #    incorrect capitalization used in #include
#                             #      <...> (most)
#     [no]implicit[conv]      #    implicit arithmetic conversions; implies
#                             #      '-warn impl_float2int,impl_signedunsigned'
#                             #      (all)
#     [no]impl_int2float      #    implicit integral to floating conversions
#                             #      (all)
#     [no]impl_float2int      #    implicit floating to integral conversions
#                             #      (all)
#     [no]impl_signedunsigned #    implicit signed/unsigned conversions (all)
#                             #
#     [no]relax_i2i_conv      #    relax warnings for implicit integer to
#                             #      integer arithmetic conversions (off for
#                             #      full, on otherwise)
#     [no]undef[macro]        #    use of undefined macros in #if/#elif
#                             #      conditionals (full)
#     [no]notinlined          #    'inline' functions not inlined (full)
#     [no]padding             #    padding added between struct members (full)
#     [no]notused             #    result of non-void-returning function not
#                             #      used (full)
#     [no]anyptrintconv       #    any conversions from pointers to integers
#                             #      (full)
#     [no]alias_ptr_conv      #    generates warnings for potentially dangerous
#                             #      pointer casts (full)
#     display|dump            #    display list of active warnings
#                             #
#
#-------------------------------------------------------------------------------
#Embedded PPC Project Options
#-------------------------------------------------------------------------------
#  -disable_extensions on|    # for this tool;
#    off                      #   disable cw extensions; default is off



# ppsi c compiler toolchain options
-c
-enc ascii
-disable_extensions off
-warn illpragmas
-warn hidevirtual
-warn missingreturn
-warn unusedexpr
-warn extracomma
-warn structclass
-warn notinlined
-opt level=2
-opt space
-opt peep
-inline on
-inline nobottomup
-align powerpc
-func_align 4
-pooldata off
-spe_vector
-readonlystrings
-flag no-pool_strings
-common off
-use_lmw_stmw on
-volatileasm
-schedule on
-use_isel on
-Cpp_Exceptions off
-bool off
-lang c99
-gccext on
-enum int
-str nopool
-str reuse
-ipa off




-prefix "$(PA_INCLUDE)/lib_c99.prefix"
-nostdinc
-nosyspath
#-i "$(CONFIG)/pxs30m60"
#-i "$(CONFIG)/common"
#-i "$(DEBUG)/bsp"
#-i "$(DEBUG)/psp"
#-i "$(DEBUG)/mfs"
#-i "$(DEBUG)/rtcs"
#-i "$(DEBUG)/shell"
-I-
-I"$(PA_INCLUDE)"
-I"$(PA_RUNTIME)/Include"
-I"$(PA_SUPPORT)/Initialization_Files"
